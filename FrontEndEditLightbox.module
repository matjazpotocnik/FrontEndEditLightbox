<?php

/**
 * Front-End Edit Lightbox (FEEL) for ProcessWire
 * Edit pages on the frontend using lightboxed admin.
 *
 * @author  Roland Toth <contact@rolandtoth.hu>
 * @license The MIT License (MIT)
 */

/**
 * Class FrontEndEditLightbox
 */
class FrontEndEditLightbox extends WireData implements Module, ConfigurableModule
{
    /**
     * Module configuraton values
     */
    private $configData;

    /**
     * Module info
     */
    public static function getModuleInfo()
    {
        return array(
            'title'     => 'Front-End Edit Lightbox',
            'version'   => '1.4.1',
            'summary'   => 'Edit pages on the frontend using lightboxed admin.',
            'author'    => 'Roland Toth',
            'href'      => 'https://github.com/rolandtoth/FrontEndEditLightbox',
            'icon'      => 'paper-plane',
            'autoload'  => true,
            'singular'  => true,
            'permanent' => false,
        );
    }

    /**
     * Default values
     */
    protected static $defaults = array(
        'isEnabled'                => true,
        'text'                     => '#',
        'mode'                     => 'page-edit',
        'parent'                   => '',
        'class'                    => 'feel',
        'fields'                   => '',
        'targetField'              => '',
        'targetTab'                => '',
        'closeOnSave'              => true,
        'fixedSaveButton'          => true,
        'enableTemplateEdit'       => false,
        'selectorsToHide'          => '#_ProcessPageEditChildren, #ProcessPageEditChildren, ' .
            '#_ProcessPageEditDelete, #ProcessPageEditDelete, ' .
            '#_ProcessPageEditRestore, #ProcessPageEditRestore, ' .
            '#_ProcessPageEditSettings, ' .
            '#_WireTabDelete, #WireTabDelete',
        'selectorsToHideSuperUser' => '#_ProcessPageEditChildren, #ProcessPageEditChildren',
        'fieldHighlightStyle'      => 'outline: 2px solid #89ADE2; outline-offset: -2px; z-index: 200; position: relative;',
        'styleOverrides'           => '',
        'skipLoadingScripts'       => false,
        'skipLoadingStyles'        => false,
        'closeConfirmMessage'      => 'Are you sure you want to close the editor?',
        'overrides'                => '',
    );

    /**
     * ready() hook
     */
    public function ready()
    {
        $this->configData = $this->wire('modules')->getModuleConfigData($this);

        // method needs to be present even if module is disabled to prevent PHP error
        $this->addHook('Page::feel', $this, 'addMethod');

        if (isset($this->configData['isEnabled']) && $this->configData['isEnabled'] !== 1) {
            return false;
        }

        // add assets only if user is logged in and has edit-page permission
        if ($this->wire('user')->isLoggedin() && $this->wire('user')->hasPermission('page-edit') && !$this->wire('config')->ajax) {
            $this->addHookAfter('Page::render', $this, 'addAssets');
        }

        // prevent unnecessary admin redirect when no errors (by matjazp)
        $this->addHookBefore('ProcessPageEdit::processSaveRedirect', $this, 'preventRedirect');
    }

    /**
     * Prevent redirect on save if there are no errors.
     *
     * @param HookEvent $event
     */
    public function preventRedirect(HookEvent $event)
    {
        $redirect = $this->wire('input')->post('_feelredirect');

        if ($redirect === 'self') {
            $notices = $event->notices;
            $formErrors = false;

            foreach ($notices as $notice) {
                if ($notice instanceof NoticeError) {
                    $formErrors = true;
                    break;
                }
            }

            if (!$formErrors) {
                exit;
            }
        }
    }

    /**
     * Inject CSS/JS to page
     *
     * @param HookEvent $event
     *
     * @return bool
     */
    public function addAssets(HookEvent $event)
    {
        $page = $event->object;
        $configData = $this->configData;
        $defaults = self::$defaults;
        $config = $this->wire('config');

        $assetsFEEL = $config->urls->siteModules . __CLASS__ . '/' . __CLASS__;
        $cssStyleOverides = empty($configData['styleOverrides']) ? '' : '<style>' .
            PHP_EOL . $configData['styleOverrides'] . PHP_EOL . '</style>' . PHP_EOL;

        $jsFEEL = '';
        $defaultScripts = '';

        // do not add all assets to admin
        if ($page->template->name !== 'admin') {

            // load FEEL & MFP js only if allowed
            if (!isset($configData['skipLoadingScripts']) || $configData['skipLoadingScripts'] != 1) {
                $jsFEEL = '<script src="' . $assetsFEEL . 'Load.js' . '"></script>' . PHP_EOL;
            }

            $jsDefaults = array();
            foreach (array('closeOnSave', 'fixedSaveButton', 'enableTemplateEdit', 'selectorsToHide', 'fieldHighlightStyle', 'skipLoadingStyles', 'closeConfirmMessage') as $key) {
                $jsDefaults[$key] = isset($configData[$key]) ? $this->wire('sanitizer')->textarea($configData[$key]) : self::$defaults[$key];
            }

            if ($this->wire('user')->isSuperuser()) {
                $jsDefaults['selectorsToHide'] = isset($configData['selectorsToHideSuperUser']) ? $configData['selectorsToHideSuperUser'] : '';
            }

            // add wire modules url
            $jsDefaults['wireModules'] = $config->urls->modules;
            $jsDefaults['siteModules'] = $config->urls->siteModules;

            $encodedDefaults = (defined('JSON_PRETTY_PRINT') && $config->debug)
                ? json_encode($jsDefaults, JSON_PRETTY_PRINT)
                : json_encode($jsDefaults);

            $defaultScripts = '<script>' . 'var FEEL_defaults = ' . $encodedDefaults . '</script>';
        }

        // note: do not use quotes around data-hide-feel="1", LanguageTranslator chokes on it
        $event->return = str_replace('<body', '<body data-hide-feel=1', $event->return);
        $event->return = str_replace('</head>', $cssStyleOverides . $defaultScripts . $jsFEEL . PHP_EOL . '</head>', $event->return);

        return false;
    }

    /**
     * Add $page->feel() method
     *
     * @param HookEvent $event
     *
     * @return string
     */
    public function addMethod(HookEvent $event)
    {
        $configData = $this->configData;

        if (isset($configData['isEnabled']) && $configData['isEnabled'] !== 1) {
            return false;
        }

        $page = $event->object;
        $user = $this->wire('user');

        // return if template is disabled (with the exception of SuperUsers)
        if (isset($configData['excluded_templates']) && !$user->isSuperUser() && !$this->_isTemplateAllowed($page->template->name, $configData['excluded_templates'])) {
            return false;
        }

        if (!$this->_isPageAllowed($page)) {
            return false;
        }

        $defaults = self::$defaults;
        $customOptions = !empty($event->arguments[0]) ? $event->arguments[0] : array();
        $sanitizer = $this->wire('sanitizer');
        $settings = array();
        $attributes = array();
        $lang = $user->language ? '&language=' . $user->language->id : '';

        // add custom data-* attributes
        // process these first to disable overriding defaults
        if ($customOptions) {
            foreach ($customOptions as $key => $unused) {
                if (strpos($key, 'data-') === 0) {
                    $attributes[$key] = $key . ' = "' . $sanitizer->textarea($customOptions[$key]) . '"';
                }
            }
        }

        // merge module defaults with module options
        foreach ($defaults as $key => $unused) {
            $settings[$key] = $this->get($key) ? $sanitizer->textarea($this->get($key)) : $defaults[$key];
        }

        // merge options passed to $page->feel()
        foreach ($settings as $key => $unused) {
            // using sanitizer flattens arrays
//            $settings[$key] = isset($customOptions[$key]) ? $this->sanitizer->textarea($customOptions[$key]) : $settings[$key];
            $settings[$key] = isset($customOptions[$key]) ? $customOptions[$key] : $settings[$key];
        }

        // classes: prepend "feel-" only on own classes
        $classes = '';
        $ownClasses = explode(' ', 'fixed relative absolute left right top bottom button small invert transparent');

        if (!empty($settings['class'])) {

            // add feel- prefix to all class
            $classes = explode(' ', 'feel-' . preg_replace("/\s/", ' feel-', $settings['class']));

            // remove feel- prefix from foreign classes
            $classesLength = count($classes);
            for ($i = 0; $i < $classesLength; $i++) {
                $cc = $classes[$i];
                $prefixlessClass = str_replace('feel-', '', $cc);
                if (!in_array($prefixlessClass, $ownClasses, true)) {
                    $classes[$i] = str_replace('feel-', '', $cc);
                }
            }
        }

        $fields = '';

        if (!empty($settings['fields'])) {

            $fieldsArray = explode(',', $settings['fields']);

            foreach ($fieldsArray as $key => $fieldName) {
                if (!$page->template->hasField($fieldName)) {
                    unset($fieldsArray[$key]);
                }
            }

            if (!empty($fieldsArray)) {
                $fields = '&fields=' . implode(',', $fieldsArray);
            }
        }

        if ($settings['mode'] === 'page-add') {
            $parent = !empty($settings['parent']) ? $settings['parent'] : $page->id;
            $editUrl = $this->wire('config')->urls->admin . 'page/add/?parent_id=' . $parent . $lang . $fields;
            $attributes['editUrl'] = 'data-mfp-src="' . $editUrl . '&modal=1"';
        } else {
            $editUrl = $page->editUrl . $lang . $fields;
            $attributes['editUrl'] = 'data-mfp-src="' . $editUrl . '&modal=1"';
            $attributes['templateId'] = $user->isSuperuser() ? 'data-template-id="' . $page->template->id . '"' : '';
        }

        $attributes['class'] = 'class="' . implode(' ', $classes) . '"';
        $attributes['targetField'] = !empty($settings['targetField']) ? 'data-target-field="Inputfield_' . $settings['targetField'] . '"' : '';
        $attributes['targetTab'] = !empty($settings['targetTab']) ? 'data-target-tab="' . $settings['targetTab'] . '"' : '';
        $attributes['overrides'] = (!empty($settings['overrides']) && is_array($settings['overrides'])) ? "data-overrides='" . json_encode($settings['overrides']) . "'" : '';

        $event->return = '<a href="' . $editUrl . '" data-feel ' . implode(' ', array_filter($attributes)) . '>' . $settings['text'] . '</a>';
    }

    /**
     * Check if page meets the requirements to show edit links
     *
     * @param Page $page
     *
     * @return bool
     */
    private function _isPageAllowed($page)
    {
        //return ($page instanceof Page && $page->editable() && $page->template != 'admin' && $this->wire('user')->isLoggedin());

        //https://github.com/processwire/processwire-issues/issues/1322
        if ($page instanceof User) {
            $proc = $this->wire('process');
            $this->wire('process', $this->wire('user')->id === $page->id ? 'ProcessProfile' : 'ProcessUser');
            $editable = $page->editable();
            $this->wire('process', $proc);
            return $editable;
        }
        return $page->editable();
    }

    /**
     * Check if page template is not disabled
     *
     * @param $template_name
     * @param $excluded_templates
     *
     * @return bool
     */
    private function _isTemplateAllowed($template_name, $excluded_templates)
    {
        return !in_array($template_name, $excluded_templates, true);
    }


    /**
     * Format value as "Value (name)" based on value/name availability
     *
     * @param $obj
     *
     * @return string
     */
    public function getFormattedOptionName($obj)
    {
        return !empty($obj->label) ? $obj->label . ' (' . $obj->name . ')' : $obj->name;
    }

    /**
     * Module fields
     */
    public function getModuleConfigInputfields(array $data)
    {
        $modules = $this->wire('modules');
        $recommendedString = __('Recommended:', __FILE__) . "\n";

        $fields = new InputfieldWrapper();

        $field = $modules->get('InputfieldCheckbox');
        $name = 'isEnabled';
        $field->name = $name;
        $defaultValue = self::$defaults[$name];
        $field->label = __('Toggle module on/off', __FILE__);
        $field->checkboxLabel = __('Enable module', __FILE__);
        $field->notes = __('Uncheck to temporarily disable edit links instead of manually removing them from templates.', __FILE__);
        $field->value = (isset($data[$name])) ? $data[$name] : (int)$defaultValue;
        $field->checked = ($field->value === 1) ? 'checked' : '';
        $field->columnWidth = 100;
        $fields->add($field);

        $fieldset = new InputfieldFieldset();
        $fieldset->label = __('Options', __FILE__);
        $fieldset->showIf = 'isEnabled=1';

        $field = $modules->get('InputfieldText');
        $name = 'text';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Default edit link text', __FILE__);
        $field->description = __('Text to display on edit links. Defaults to "#" if empty.', __FILE__);
        $field->notes = __('Use `"text" => ""` in your templates to force no text.', __FILE__);
        $field->value = (isset($data[$name]) && !empty($data[$name])) ? $this->sanitizer->textarea($data[$name]) : $defaultValue;
        $field->columnWidth = 34;
        $fieldset->add($field);

        $field = $modules->get('InputfieldAsmSelect');
        $name = 'excluded_templates';
        $field->name = $name;
        $field->label = __('Excluded templates', __FILE__);
        $field->description = __('Templates where module should be disabled.', __FILE__);
        $field->notes = __('Note: SuperUsers will see all edit links.', __FILE__);
        $field->columnWidth = 33;
        foreach ($this->templates as $t) {
            if ($t->flags && $t->flags === Template::flagSystem) {
                continue;
            }
            $field->addOption($t->name, self::getFormattedOptionName($t));
        }
        $field->value = isset($data[$name]) ? $data[$name] : '';
        $fieldset->add($field);

        $field = $modules->get('InputfieldText');
        $name = 'closeConfirmMessage';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Close confirm message', __FILE__) . ' ' . __('(Chrome only)', __FILE__);
        $field->description = __('Message to show on lightbox close with unsaved changes.', __FILE__);
        $field->notes = ' `' . $defaultValue . '`';
        $field->value = (isset($data[$name]) && !empty($data[$name])) ? $data[$name] : $defaultValue;
        $field->columnWidth = 33;
        $fieldset->add($field);

        $field = $modules->get('InputfieldCheckbox');
        $name = 'closeOnSave';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Close on save', __FILE__);
        $field->notes = __('Auto close lightbox on save if no validation error occurs.', __FILE__);
        $field->value = isset($data[$name]) ? $data[$name] : (int)$defaultValue;
        $field->checked = ($field->value === 1) ? 'checked' : '';
        $field->columnWidth = 34;
        $fieldset->add($field);

        $field = $modules->get('InputfieldCheckbox');
        $name = 'fixedSaveButton';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Fixed save button', __FILE__);
        $field->notes = __('Stick the save button to the top-right corner for easier access.', __FILE__);
        $field->value = isset($data[$name]) ? $data[$name] : (int)$defaultValue;
        $field->checked = ($field->value === 1) ? 'checked' : '';
        $field->columnWidth = 33;
        $fieldset->add($field);

        $field = $modules->get('InputfieldCheckbox');
        $name = 'enableTemplateEdit';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Enable template edit mode', __FILE__);
        $field->notes = __('Edit page template using ctrl+click on edit links.', __FILE__);
        $field->value = isset($data[$name]) ? $data[$name] : (int)$defaultValue;
        $field->checked = ($field->value === 1) ? 'checked' : '';
        $field->columnWidth = 33;
        $fieldset->add($field);

        $field = $modules->get('InputfieldCheckbox');
        $name = 'skipLoadingScripts';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Do not load FrontEndEditLightbox.js', __FILE__);
        $field->notes = __('Check if you would like to load FEEL Js manually (eg. when using a script loader).', __FILE__);
        $field->value = isset($data[$name]) ? $data[$name] : (int)$defaultValue;
        $field->checked = ($field->value === 1) ? 'checked' : '';
        $field->columnWidth = 34;
        $fieldset->add($field);

        $field = $modules->get('InputfieldCheckbox');
        $name = 'skipLoadingStyles';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Do not load FrontEndEditLightbox.css', __FILE__);
        $field->notes = __('Check if you would like to load your custom CSS.', __FILE__);
        $field->value = isset($data[$name]) ? $data[$name] : (int)$defaultValue;
        $field->checked = ($field->value === 1) ? 'checked' : '';
        $field->columnWidth = 33;
        $fieldset->add($field);

        $field = $modules->get('InputfieldTextarea');
        $name = 'selectorsToHide';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Selectors to hide for non-SuperUsers', __FILE__);
        $field->description = __('Comma-separated list of CSS selectors to hide elements from the admin.', __FILE__);
        $field->notes = $recommendedString . ' `' . $defaultValue . '`';
        $field->value = (isset($data[$name]) && !empty($data[$name])) ? $data[$name] : '';
        $field->rows = 3;
        $field->columnWidth = 100;
        $fieldset->add($field);

        $field = $modules->get('InputfieldTextarea');
        $name = 'selectorsToHideSuperUser';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Selectors to hide for SuperUsers', __FILE__);
        $field->description = __('Comma-separated list of CSS selectors to hide elements from the admin.', __FILE__);
        $field->notes = $recommendedString . ' `' . $defaultValue . '`';
        $field->value = (isset($data[$name]) && !empty($data[$name])) ? $data[$name] : '';
        $field->rows = 3;
        $field->columnWidth = 100;
        $fieldset->add($field);

        $field = $modules->get('InputfieldText');
        $name = 'fieldHighlightStyle';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Field highlight style', __FILE__);
        $field->description = __('CSS declarations to style target field. Leave empty to disable.', __FILE__);
        $field->notes = $recommendedString . ' `' . $defaultValue . '`';
        $field->value = isset($data[$name]) ? $data[$name] : '';
        $field->columnWidth = 100;
        $field->collapsed = 2;
        $fieldset->add($field);

        $field = $modules->get('InputfieldTextarea');
        $name = 'styleOverrides';
        $defaultValue = self::$defaults[$name];
        $field->name = $name;
        $field->label = __('Style overrides', __FILE__);
        $field->description = __('Custom CSS to override styles.', __FILE__);
        $field->notes = __('Example', __FILE__) . '`: .mfp-wrap.mfp-feel .mfp-content { max-width: 100%; max-height: 100%; }`';
        $field->value = isset($data[$name]) ? $data[$name] : $defaultValue;
        $field->attr('style', 'font-family:"Courier New",monospace!important');
        $field->columnWidth = 100;
        $field->collapsed = 2;
        $field->rows = 8;
        $fieldset->add($field);

        $fields->add($fieldset);

        return $fields;
    }
}
